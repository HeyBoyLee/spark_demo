/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-10")
public class banji implements org.apache.thrift.TBase<banji, banji._Fields>, java.io.Serializable, Cloneable, Comparable<banji> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("banji");

  private static final org.apache.thrift.protocol.TField BANJI_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("banjiName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ALL_STUDENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("allStudents", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new banjiStandardSchemeFactory());
    schemes.put(TupleScheme.class, new banjiTupleSchemeFactory());
  }

  public String banjiName; // required
  public List<student> allStudents; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BANJI_NAME((short)1, "banjiName"),
    ALL_STUDENTS((short)2, "allStudents");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BANJI_NAME
          return BANJI_NAME;
        case 2: // ALL_STUDENTS
          return ALL_STUDENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BANJI_NAME, new org.apache.thrift.meta_data.FieldMetaData("banjiName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALL_STUDENTS, new org.apache.thrift.meta_data.FieldMetaData("allStudents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, student.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(banji.class, metaDataMap);
  }

  public banji() {
  }

  public banji(
    String banjiName,
    List<student> allStudents)
  {
    this();
    this.banjiName = banjiName;
    this.allStudents = allStudents;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public banji(banji other) {
    if (other.isSetBanjiName()) {
      this.banjiName = other.banjiName;
    }
    if (other.isSetAllStudents()) {
      List<student> __this__allStudents = new ArrayList<student>(other.allStudents.size());
      for (student other_element : other.allStudents) {
        __this__allStudents.add(new student(other_element));
      }
      this.allStudents = __this__allStudents;
    }
  }

  public banji deepCopy() {
    return new banji(this);
  }

  @Override
  public void clear() {
    this.banjiName = null;
    this.allStudents = null;
  }

  public String getBanjiName() {
    return this.banjiName;
  }

  public banji setBanjiName(String banjiName) {
    this.banjiName = banjiName;
    return this;
  }

  public void unsetBanjiName() {
    this.banjiName = null;
  }

  /** Returns true if field banjiName is set (has been assigned a value) and false otherwise */
  public boolean isSetBanjiName() {
    return this.banjiName != null;
  }

  public void setBanjiNameIsSet(boolean value) {
    if (!value) {
      this.banjiName = null;
    }
  }

  public int getAllStudentsSize() {
    return (this.allStudents == null) ? 0 : this.allStudents.size();
  }

  public java.util.Iterator<student> getAllStudentsIterator() {
    return (this.allStudents == null) ? null : this.allStudents.iterator();
  }

  public void addToAllStudents(student elem) {
    if (this.allStudents == null) {
      this.allStudents = new ArrayList<student>();
    }
    this.allStudents.add(elem);
  }

  public List<student> getAllStudents() {
    return this.allStudents;
  }

  public banji setAllStudents(List<student> allStudents) {
    this.allStudents = allStudents;
    return this;
  }

  public void unsetAllStudents() {
    this.allStudents = null;
  }

  /** Returns true if field allStudents is set (has been assigned a value) and false otherwise */
  public boolean isSetAllStudents() {
    return this.allStudents != null;
  }

  public void setAllStudentsIsSet(boolean value) {
    if (!value) {
      this.allStudents = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BANJI_NAME:
      if (value == null) {
        unsetBanjiName();
      } else {
        setBanjiName((String)value);
      }
      break;

    case ALL_STUDENTS:
      if (value == null) {
        unsetAllStudents();
      } else {
        setAllStudents((List<student>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BANJI_NAME:
      return getBanjiName();

    case ALL_STUDENTS:
      return getAllStudents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BANJI_NAME:
      return isSetBanjiName();
    case ALL_STUDENTS:
      return isSetAllStudents();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof banji)
      return this.equals((banji)that);
    return false;
  }

  public boolean equals(banji that) {
    if (that == null)
      return false;

    boolean this_present_banjiName = true && this.isSetBanjiName();
    boolean that_present_banjiName = true && that.isSetBanjiName();
    if (this_present_banjiName || that_present_banjiName) {
      if (!(this_present_banjiName && that_present_banjiName))
        return false;
      if (!this.banjiName.equals(that.banjiName))
        return false;
    }

    boolean this_present_allStudents = true && this.isSetAllStudents();
    boolean that_present_allStudents = true && that.isSetAllStudents();
    if (this_present_allStudents || that_present_allStudents) {
      if (!(this_present_allStudents && that_present_allStudents))
        return false;
      if (!this.allStudents.equals(that.allStudents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_banjiName = true && (isSetBanjiName());
    list.add(present_banjiName);
    if (present_banjiName)
      list.add(banjiName);

    boolean present_allStudents = true && (isSetAllStudents());
    list.add(present_allStudents);
    if (present_allStudents)
      list.add(allStudents);

    return list.hashCode();
  }

  @Override
  public int compareTo(banji other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBanjiName()).compareTo(other.isSetBanjiName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBanjiName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.banjiName, other.banjiName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllStudents()).compareTo(other.isSetAllStudents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllStudents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allStudents, other.allStudents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("banji(");
    boolean first = true;

    sb.append("banjiName:");
    if (this.banjiName == null) {
      sb.append("null");
    } else {
      sb.append(this.banjiName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allStudents:");
    if (this.allStudents == null) {
      sb.append("null");
    } else {
      sb.append(this.allStudents);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (banjiName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'banjiName' was not present! Struct: " + toString());
    }
    if (allStudents == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'allStudents' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class banjiStandardSchemeFactory implements SchemeFactory {
    public banjiStandardScheme getScheme() {
      return new banjiStandardScheme();
    }
  }

  private static class banjiStandardScheme extends StandardScheme<banji> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, banji struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BANJI_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.banjiName = iprot.readString();
              struct.setBanjiNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALL_STUDENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.allStudents = new ArrayList<student>(_list0.size);
                student _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new student();
                  _elem1.read(iprot);
                  struct.allStudents.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAllStudentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, banji struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.banjiName != null) {
        oprot.writeFieldBegin(BANJI_NAME_FIELD_DESC);
        oprot.writeString(struct.banjiName);
        oprot.writeFieldEnd();
      }
      if (struct.allStudents != null) {
        oprot.writeFieldBegin(ALL_STUDENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.allStudents.size()));
          for (student _iter3 : struct.allStudents)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class banjiTupleSchemeFactory implements SchemeFactory {
    public banjiTupleScheme getScheme() {
      return new banjiTupleScheme();
    }
  }

  private static class banjiTupleScheme extends TupleScheme<banji> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, banji struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.banjiName);
      {
        oprot.writeI32(struct.allStudents.size());
        for (student _iter4 : struct.allStudents)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, banji struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.banjiName = iprot.readString();
      struct.setBanjiNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.allStudents = new ArrayList<student>(_list5.size);
        student _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new student();
          _elem6.read(iprot);
          struct.allStudents.add(_elem6);
        }
      }
      struct.setAllStudentsIsSet(true);
    }
  }

}

