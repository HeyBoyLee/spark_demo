/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaomi.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-10")
public class school implements org.apache.thrift.TBase<school, school._Fields>, java.io.Serializable, Cloneable, Comparable<school> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("school");

  private static final org.apache.thrift.protocol.TField SCHOOL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ZHUANYE_FIELD_DESC = new org.apache.thrift.protocol.TField("zhuanye", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ALL_BANJI_FIELD_DESC = new org.apache.thrift.protocol.TField("allBanji", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new schoolStandardSchemeFactory());
    schemes.put(TupleScheme.class, new schoolTupleSchemeFactory());
  }

  public String schoolName; // required
  public long age; // required
  public List<String> zhuanye; // required
  public List<banji> allBanji; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCHOOL_NAME((short)1, "schoolName"),
    AGE((short)2, "age"),
    ZHUANYE((short)3, "zhuanye"),
    ALL_BANJI((short)4, "allBanji");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHOOL_NAME
          return SCHOOL_NAME;
        case 2: // AGE
          return AGE;
        case 3: // ZHUANYE
          return ZHUANYE;
        case 4: // ALL_BANJI
          return ALL_BANJI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHOOL_NAME, new org.apache.thrift.meta_data.FieldMetaData("schoolName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ZHUANYE, new org.apache.thrift.meta_data.FieldMetaData("zhuanye", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALL_BANJI, new org.apache.thrift.meta_data.FieldMetaData("allBanji", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, banji.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(school.class, metaDataMap);
  }

  public school() {
  }

  public school(
    String schoolName,
    long age,
    List<String> zhuanye,
    List<banji> allBanji)
  {
    this();
    this.schoolName = schoolName;
    this.age = age;
    setAgeIsSet(true);
    this.zhuanye = zhuanye;
    this.allBanji = allBanji;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public school(school other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSchoolName()) {
      this.schoolName = other.schoolName;
    }
    this.age = other.age;
    if (other.isSetZhuanye()) {
      List<String> __this__zhuanye = new ArrayList<String>(other.zhuanye);
      this.zhuanye = __this__zhuanye;
    }
    if (other.isSetAllBanji()) {
      List<banji> __this__allBanji = new ArrayList<banji>(other.allBanji.size());
      for (banji other_element : other.allBanji) {
        __this__allBanji.add(new banji(other_element));
      }
      this.allBanji = __this__allBanji;
    }
  }

  public school deepCopy() {
    return new school(this);
  }

  @Override
  public void clear() {
    this.schoolName = null;
    setAgeIsSet(false);
    this.age = 0;
    this.zhuanye = null;
    this.allBanji = null;
  }

  public String getSchoolName() {
    return this.schoolName;
  }

  public school setSchoolName(String schoolName) {
    this.schoolName = schoolName;
    return this;
  }

  public void unsetSchoolName() {
    this.schoolName = null;
  }

  /** Returns true if field schoolName is set (has been assigned a value) and false otherwise */
  public boolean isSetSchoolName() {
    return this.schoolName != null;
  }

  public void setSchoolNameIsSet(boolean value) {
    if (!value) {
      this.schoolName = null;
    }
  }

  public long getAge() {
    return this.age;
  }

  public school setAge(long age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public int getZhuanyeSize() {
    return (this.zhuanye == null) ? 0 : this.zhuanye.size();
  }

  public java.util.Iterator<String> getZhuanyeIterator() {
    return (this.zhuanye == null) ? null : this.zhuanye.iterator();
  }

  public void addToZhuanye(String elem) {
    if (this.zhuanye == null) {
      this.zhuanye = new ArrayList<String>();
    }
    this.zhuanye.add(elem);
  }

  public List<String> getZhuanye() {
    return this.zhuanye;
  }

  public school setZhuanye(List<String> zhuanye) {
    this.zhuanye = zhuanye;
    return this;
  }

  public void unsetZhuanye() {
    this.zhuanye = null;
  }

  /** Returns true if field zhuanye is set (has been assigned a value) and false otherwise */
  public boolean isSetZhuanye() {
    return this.zhuanye != null;
  }

  public void setZhuanyeIsSet(boolean value) {
    if (!value) {
      this.zhuanye = null;
    }
  }

  public int getAllBanjiSize() {
    return (this.allBanji == null) ? 0 : this.allBanji.size();
  }

  public java.util.Iterator<banji> getAllBanjiIterator() {
    return (this.allBanji == null) ? null : this.allBanji.iterator();
  }

  public void addToAllBanji(banji elem) {
    if (this.allBanji == null) {
      this.allBanji = new ArrayList<banji>();
    }
    this.allBanji.add(elem);
  }

  public List<banji> getAllBanji() {
    return this.allBanji;
  }

  public school setAllBanji(List<banji> allBanji) {
    this.allBanji = allBanji;
    return this;
  }

  public void unsetAllBanji() {
    this.allBanji = null;
  }

  /** Returns true if field allBanji is set (has been assigned a value) and false otherwise */
  public boolean isSetAllBanji() {
    return this.allBanji != null;
  }

  public void setAllBanjiIsSet(boolean value) {
    if (!value) {
      this.allBanji = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCHOOL_NAME:
      if (value == null) {
        unsetSchoolName();
      } else {
        setSchoolName((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Long)value);
      }
      break;

    case ZHUANYE:
      if (value == null) {
        unsetZhuanye();
      } else {
        setZhuanye((List<String>)value);
      }
      break;

    case ALL_BANJI:
      if (value == null) {
        unsetAllBanji();
      } else {
        setAllBanji((List<banji>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHOOL_NAME:
      return getSchoolName();

    case AGE:
      return getAge();

    case ZHUANYE:
      return getZhuanye();

    case ALL_BANJI:
      return getAllBanji();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCHOOL_NAME:
      return isSetSchoolName();
    case AGE:
      return isSetAge();
    case ZHUANYE:
      return isSetZhuanye();
    case ALL_BANJI:
      return isSetAllBanji();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof school)
      return this.equals((school)that);
    return false;
  }

  public boolean equals(school that) {
    if (that == null)
      return false;

    boolean this_present_schoolName = true && this.isSetSchoolName();
    boolean that_present_schoolName = true && that.isSetSchoolName();
    if (this_present_schoolName || that_present_schoolName) {
      if (!(this_present_schoolName && that_present_schoolName))
        return false;
      if (!this.schoolName.equals(that.schoolName))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_zhuanye = true && this.isSetZhuanye();
    boolean that_present_zhuanye = true && that.isSetZhuanye();
    if (this_present_zhuanye || that_present_zhuanye) {
      if (!(this_present_zhuanye && that_present_zhuanye))
        return false;
      if (!this.zhuanye.equals(that.zhuanye))
        return false;
    }

    boolean this_present_allBanji = true && this.isSetAllBanji();
    boolean that_present_allBanji = true && that.isSetAllBanji();
    if (this_present_allBanji || that_present_allBanji) {
      if (!(this_present_allBanji && that_present_allBanji))
        return false;
      if (!this.allBanji.equals(that.allBanji))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_schoolName = true && (isSetSchoolName());
    list.add(present_schoolName);
    if (present_schoolName)
      list.add(schoolName);

    boolean present_age = true;
    list.add(present_age);
    if (present_age)
      list.add(age);

    boolean present_zhuanye = true && (isSetZhuanye());
    list.add(present_zhuanye);
    if (present_zhuanye)
      list.add(zhuanye);

    boolean present_allBanji = true && (isSetAllBanji());
    list.add(present_allBanji);
    if (present_allBanji)
      list.add(allBanji);

    return list.hashCode();
  }

  @Override
  public int compareTo(school other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSchoolName()).compareTo(other.isSetSchoolName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchoolName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolName, other.schoolName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZhuanye()).compareTo(other.isSetZhuanye());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZhuanye()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zhuanye, other.zhuanye);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllBanji()).compareTo(other.isSetAllBanji());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllBanji()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allBanji, other.allBanji);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("school(");
    boolean first = true;

    sb.append("schoolName:");
    if (this.schoolName == null) {
      sb.append("null");
    } else {
      sb.append(this.schoolName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zhuanye:");
    if (this.zhuanye == null) {
      sb.append("null");
    } else {
      sb.append(this.zhuanye);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allBanji:");
    if (this.allBanji == null) {
      sb.append("null");
    } else {
      sb.append(this.allBanji);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (schoolName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'schoolName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'age' because it's a primitive and you chose the non-beans generator.
    if (zhuanye == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'zhuanye' was not present! Struct: " + toString());
    }
    if (allBanji == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'allBanji' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class schoolStandardSchemeFactory implements SchemeFactory {
    public schoolStandardScheme getScheme() {
      return new schoolStandardScheme();
    }
  }

  private static class schoolStandardScheme extends StandardScheme<school> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, school struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHOOL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schoolName = iprot.readString();
              struct.setSchoolNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.age = iprot.readI64();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ZHUANYE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.zhuanye = new ArrayList<String>(_list8.size);
                String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.zhuanye.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setZhuanyeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALL_BANJI
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.allBanji = new ArrayList<banji>(_list11.size);
                banji _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new banji();
                  _elem12.read(iprot);
                  struct.allBanji.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setAllBanjiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAge()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'age' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, school struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.schoolName != null) {
        oprot.writeFieldBegin(SCHOOL_NAME_FIELD_DESC);
        oprot.writeString(struct.schoolName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI64(struct.age);
      oprot.writeFieldEnd();
      if (struct.zhuanye != null) {
        oprot.writeFieldBegin(ZHUANYE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.zhuanye.size()));
          for (String _iter14 : struct.zhuanye)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.allBanji != null) {
        oprot.writeFieldBegin(ALL_BANJI_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.allBanji.size()));
          for (banji _iter15 : struct.allBanji)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class schoolTupleSchemeFactory implements SchemeFactory {
    public schoolTupleScheme getScheme() {
      return new schoolTupleScheme();
    }
  }

  private static class schoolTupleScheme extends TupleScheme<school> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, school struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.schoolName);
      oprot.writeI64(struct.age);
      {
        oprot.writeI32(struct.zhuanye.size());
        for (String _iter16 : struct.zhuanye)
        {
          oprot.writeString(_iter16);
        }
      }
      {
        oprot.writeI32(struct.allBanji.size());
        for (banji _iter17 : struct.allBanji)
        {
          _iter17.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, school struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.schoolName = iprot.readString();
      struct.setSchoolNameIsSet(true);
      struct.age = iprot.readI64();
      struct.setAgeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.zhuanye = new ArrayList<String>(_list18.size);
        String _elem19;
        for (int _i20 = 0; _i20 < _list18.size; ++_i20)
        {
          _elem19 = iprot.readString();
          struct.zhuanye.add(_elem19);
        }
      }
      struct.setZhuanyeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.allBanji = new ArrayList<banji>(_list21.size);
        banji _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new banji();
          _elem22.read(iprot);
          struct.allBanji.add(_elem22);
        }
      }
      struct.setAllBanjiIsSet(true);
    }
  }

}

