/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.geofence.log;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-10")
public class MetokApiInfo implements org.apache.thrift.TBase<MetokApiInfo, MetokApiInfo._Fields>, java.io.Serializable, Cloneable, Comparable<MetokApiInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetokApiInfo");

  private static final org.apache.thrift.protocol.TField SERVER_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHost", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("serverGroup", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERVER_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("serverMode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField API_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("apiName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField API_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("apiVersion", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REST_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("restUri", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetokApiInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetokApiInfoTupleSchemeFactory());
  }

  public String serverHost; // optional
  public String serverGroup; // optional
  public String serverMode; // optional
  public String apiName; // optional
  public String apiVersion; // optional
  public String restUri; // optional
  public String method; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_HOST((short)1, "serverHost"),
    SERVER_GROUP((short)2, "serverGroup"),
    SERVER_MODE((short)3, "serverMode"),
    API_NAME((short)4, "apiName"),
    API_VERSION((short)5, "apiVersion"),
    REST_URI((short)6, "restUri"),
    METHOD((short)7, "method");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_HOST
          return SERVER_HOST;
        case 2: // SERVER_GROUP
          return SERVER_GROUP;
        case 3: // SERVER_MODE
          return SERVER_MODE;
        case 4: // API_NAME
          return API_NAME;
        case 5: // API_VERSION
          return API_VERSION;
        case 6: // REST_URI
          return REST_URI;
        case 7: // METHOD
          return METHOD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SERVER_HOST,_Fields.SERVER_GROUP,_Fields.SERVER_MODE,_Fields.API_NAME,_Fields.API_VERSION,_Fields.REST_URI,_Fields.METHOD};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_HOST, new org.apache.thrift.meta_data.FieldMetaData("serverHost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("serverGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_MODE, new org.apache.thrift.meta_data.FieldMetaData("serverMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_NAME, new org.apache.thrift.meta_data.FieldMetaData("apiName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_VERSION, new org.apache.thrift.meta_data.FieldMetaData("apiVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REST_URI, new org.apache.thrift.meta_data.FieldMetaData("restUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetokApiInfo.class, metaDataMap);
  }

  public MetokApiInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetokApiInfo(MetokApiInfo other) {
    if (other.isSetServerHost()) {
      this.serverHost = other.serverHost;
    }
    if (other.isSetServerGroup()) {
      this.serverGroup = other.serverGroup;
    }
    if (other.isSetServerMode()) {
      this.serverMode = other.serverMode;
    }
    if (other.isSetApiName()) {
      this.apiName = other.apiName;
    }
    if (other.isSetApiVersion()) {
      this.apiVersion = other.apiVersion;
    }
    if (other.isSetRestUri()) {
      this.restUri = other.restUri;
    }
    if (other.isSetMethod()) {
      this.method = other.method;
    }
  }

  public MetokApiInfo deepCopy() {
    return new MetokApiInfo(this);
  }

  @Override
  public void clear() {
    this.serverHost = null;
    this.serverGroup = null;
    this.serverMode = null;
    this.apiName = null;
    this.apiVersion = null;
    this.restUri = null;
    this.method = null;
  }

  public String getServerHost() {
    return this.serverHost;
  }

  public MetokApiInfo setServerHost(String serverHost) {
    this.serverHost = serverHost;
    return this;
  }

  public void unsetServerHost() {
    this.serverHost = null;
  }

  /** Returns true if field serverHost is set (has been assigned a value) and false otherwise */
  public boolean isSetServerHost() {
    return this.serverHost != null;
  }

  public void setServerHostIsSet(boolean value) {
    if (!value) {
      this.serverHost = null;
    }
  }

  public String getServerGroup() {
    return this.serverGroup;
  }

  public MetokApiInfo setServerGroup(String serverGroup) {
    this.serverGroup = serverGroup;
    return this;
  }

  public void unsetServerGroup() {
    this.serverGroup = null;
  }

  /** Returns true if field serverGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetServerGroup() {
    return this.serverGroup != null;
  }

  public void setServerGroupIsSet(boolean value) {
    if (!value) {
      this.serverGroup = null;
    }
  }

  public String getServerMode() {
    return this.serverMode;
  }

  public MetokApiInfo setServerMode(String serverMode) {
    this.serverMode = serverMode;
    return this;
  }

  public void unsetServerMode() {
    this.serverMode = null;
  }

  /** Returns true if field serverMode is set (has been assigned a value) and false otherwise */
  public boolean isSetServerMode() {
    return this.serverMode != null;
  }

  public void setServerModeIsSet(boolean value) {
    if (!value) {
      this.serverMode = null;
    }
  }

  public String getApiName() {
    return this.apiName;
  }

  public MetokApiInfo setApiName(String apiName) {
    this.apiName = apiName;
    return this;
  }

  public void unsetApiName() {
    this.apiName = null;
  }

  /** Returns true if field apiName is set (has been assigned a value) and false otherwise */
  public boolean isSetApiName() {
    return this.apiName != null;
  }

  public void setApiNameIsSet(boolean value) {
    if (!value) {
      this.apiName = null;
    }
  }

  public String getApiVersion() {
    return this.apiVersion;
  }

  public MetokApiInfo setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  public void unsetApiVersion() {
    this.apiVersion = null;
  }

  /** Returns true if field apiVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetApiVersion() {
    return this.apiVersion != null;
  }

  public void setApiVersionIsSet(boolean value) {
    if (!value) {
      this.apiVersion = null;
    }
  }

  public String getRestUri() {
    return this.restUri;
  }

  public MetokApiInfo setRestUri(String restUri) {
    this.restUri = restUri;
    return this;
  }

  public void unsetRestUri() {
    this.restUri = null;
  }

  /** Returns true if field restUri is set (has been assigned a value) and false otherwise */
  public boolean isSetRestUri() {
    return this.restUri != null;
  }

  public void setRestUriIsSet(boolean value) {
    if (!value) {
      this.restUri = null;
    }
  }

  public String getMethod() {
    return this.method;
  }

  public MetokApiInfo setMethod(String method) {
    this.method = method;
    return this;
  }

  public void unsetMethod() {
    this.method = null;
  }

  /** Returns true if field method is set (has been assigned a value) and false otherwise */
  public boolean isSetMethod() {
    return this.method != null;
  }

  public void setMethodIsSet(boolean value) {
    if (!value) {
      this.method = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVER_HOST:
      if (value == null) {
        unsetServerHost();
      } else {
        setServerHost((String)value);
      }
      break;

    case SERVER_GROUP:
      if (value == null) {
        unsetServerGroup();
      } else {
        setServerGroup((String)value);
      }
      break;

    case SERVER_MODE:
      if (value == null) {
        unsetServerMode();
      } else {
        setServerMode((String)value);
      }
      break;

    case API_NAME:
      if (value == null) {
        unsetApiName();
      } else {
        setApiName((String)value);
      }
      break;

    case API_VERSION:
      if (value == null) {
        unsetApiVersion();
      } else {
        setApiVersion((String)value);
      }
      break;

    case REST_URI:
      if (value == null) {
        unsetRestUri();
      } else {
        setRestUri((String)value);
      }
      break;

    case METHOD:
      if (value == null) {
        unsetMethod();
      } else {
        setMethod((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_HOST:
      return getServerHost();

    case SERVER_GROUP:
      return getServerGroup();

    case SERVER_MODE:
      return getServerMode();

    case API_NAME:
      return getApiName();

    case API_VERSION:
      return getApiVersion();

    case REST_URI:
      return getRestUri();

    case METHOD:
      return getMethod();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVER_HOST:
      return isSetServerHost();
    case SERVER_GROUP:
      return isSetServerGroup();
    case SERVER_MODE:
      return isSetServerMode();
    case API_NAME:
      return isSetApiName();
    case API_VERSION:
      return isSetApiVersion();
    case REST_URI:
      return isSetRestUri();
    case METHOD:
      return isSetMethod();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetokApiInfo)
      return this.equals((MetokApiInfo)that);
    return false;
  }

  public boolean equals(MetokApiInfo that) {
    if (that == null)
      return false;

    boolean this_present_serverHost = true && this.isSetServerHost();
    boolean that_present_serverHost = true && that.isSetServerHost();
    if (this_present_serverHost || that_present_serverHost) {
      if (!(this_present_serverHost && that_present_serverHost))
        return false;
      if (!this.serverHost.equals(that.serverHost))
        return false;
    }

    boolean this_present_serverGroup = true && this.isSetServerGroup();
    boolean that_present_serverGroup = true && that.isSetServerGroup();
    if (this_present_serverGroup || that_present_serverGroup) {
      if (!(this_present_serverGroup && that_present_serverGroup))
        return false;
      if (!this.serverGroup.equals(that.serverGroup))
        return false;
    }

    boolean this_present_serverMode = true && this.isSetServerMode();
    boolean that_present_serverMode = true && that.isSetServerMode();
    if (this_present_serverMode || that_present_serverMode) {
      if (!(this_present_serverMode && that_present_serverMode))
        return false;
      if (!this.serverMode.equals(that.serverMode))
        return false;
    }

    boolean this_present_apiName = true && this.isSetApiName();
    boolean that_present_apiName = true && that.isSetApiName();
    if (this_present_apiName || that_present_apiName) {
      if (!(this_present_apiName && that_present_apiName))
        return false;
      if (!this.apiName.equals(that.apiName))
        return false;
    }

    boolean this_present_apiVersion = true && this.isSetApiVersion();
    boolean that_present_apiVersion = true && that.isSetApiVersion();
    if (this_present_apiVersion || that_present_apiVersion) {
      if (!(this_present_apiVersion && that_present_apiVersion))
        return false;
      if (!this.apiVersion.equals(that.apiVersion))
        return false;
    }

    boolean this_present_restUri = true && this.isSetRestUri();
    boolean that_present_restUri = true && that.isSetRestUri();
    if (this_present_restUri || that_present_restUri) {
      if (!(this_present_restUri && that_present_restUri))
        return false;
      if (!this.restUri.equals(that.restUri))
        return false;
    }

    boolean this_present_method = true && this.isSetMethod();
    boolean that_present_method = true && that.isSetMethod();
    if (this_present_method || that_present_method) {
      if (!(this_present_method && that_present_method))
        return false;
      if (!this.method.equals(that.method))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_serverHost = true && (isSetServerHost());
    list.add(present_serverHost);
    if (present_serverHost)
      list.add(serverHost);

    boolean present_serverGroup = true && (isSetServerGroup());
    list.add(present_serverGroup);
    if (present_serverGroup)
      list.add(serverGroup);

    boolean present_serverMode = true && (isSetServerMode());
    list.add(present_serverMode);
    if (present_serverMode)
      list.add(serverMode);

    boolean present_apiName = true && (isSetApiName());
    list.add(present_apiName);
    if (present_apiName)
      list.add(apiName);

    boolean present_apiVersion = true && (isSetApiVersion());
    list.add(present_apiVersion);
    if (present_apiVersion)
      list.add(apiVersion);

    boolean present_restUri = true && (isSetRestUri());
    list.add(present_restUri);
    if (present_restUri)
      list.add(restUri);

    boolean present_method = true && (isSetMethod());
    list.add(present_method);
    if (present_method)
      list.add(method);

    return list.hashCode();
  }

  @Override
  public int compareTo(MetokApiInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServerHost()).compareTo(other.isSetServerHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHost, other.serverHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerGroup()).compareTo(other.isSetServerGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverGroup, other.serverGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerMode()).compareTo(other.isSetServerMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverMode, other.serverMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiName()).compareTo(other.isSetApiName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiName, other.apiName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiVersion()).compareTo(other.isSetApiVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiVersion, other.apiVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestUri()).compareTo(other.isSetRestUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restUri, other.restUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MetokApiInfo(");
    boolean first = true;

    if (isSetServerHost()) {
      sb.append("serverHost:");
      if (this.serverHost == null) {
        sb.append("null");
      } else {
        sb.append(this.serverHost);
      }
      first = false;
    }
    if (isSetServerGroup()) {
      if (!first) sb.append(", ");
      sb.append("serverGroup:");
      if (this.serverGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.serverGroup);
      }
      first = false;
    }
    if (isSetServerMode()) {
      if (!first) sb.append(", ");
      sb.append("serverMode:");
      if (this.serverMode == null) {
        sb.append("null");
      } else {
        sb.append(this.serverMode);
      }
      first = false;
    }
    if (isSetApiName()) {
      if (!first) sb.append(", ");
      sb.append("apiName:");
      if (this.apiName == null) {
        sb.append("null");
      } else {
        sb.append(this.apiName);
      }
      first = false;
    }
    if (isSetApiVersion()) {
      if (!first) sb.append(", ");
      sb.append("apiVersion:");
      if (this.apiVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.apiVersion);
      }
      first = false;
    }
    if (isSetRestUri()) {
      if (!first) sb.append(", ");
      sb.append("restUri:");
      if (this.restUri == null) {
        sb.append("null");
      } else {
        sb.append(this.restUri);
      }
      first = false;
    }
    if (isSetMethod()) {
      if (!first) sb.append(", ");
      sb.append("method:");
      if (this.method == null) {
        sb.append("null");
      } else {
        sb.append(this.method);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetokApiInfoStandardSchemeFactory implements SchemeFactory {
    public MetokApiInfoStandardScheme getScheme() {
      return new MetokApiInfoStandardScheme();
    }
  }

  private static class MetokApiInfoStandardScheme extends StandardScheme<MetokApiInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetokApiInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverHost = iprot.readString();
              struct.setServerHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverGroup = iprot.readString();
              struct.setServerGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVER_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverMode = iprot.readString();
              struct.setServerModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // API_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apiName = iprot.readString();
              struct.setApiNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // API_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apiVersion = iprot.readString();
              struct.setApiVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REST_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.restUri = iprot.readString();
              struct.setRestUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.method = iprot.readString();
              struct.setMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetokApiInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serverHost != null) {
        if (struct.isSetServerHost()) {
          oprot.writeFieldBegin(SERVER_HOST_FIELD_DESC);
          oprot.writeString(struct.serverHost);
          oprot.writeFieldEnd();
        }
      }
      if (struct.serverGroup != null) {
        if (struct.isSetServerGroup()) {
          oprot.writeFieldBegin(SERVER_GROUP_FIELD_DESC);
          oprot.writeString(struct.serverGroup);
          oprot.writeFieldEnd();
        }
      }
      if (struct.serverMode != null) {
        if (struct.isSetServerMode()) {
          oprot.writeFieldBegin(SERVER_MODE_FIELD_DESC);
          oprot.writeString(struct.serverMode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiName != null) {
        if (struct.isSetApiName()) {
          oprot.writeFieldBegin(API_NAME_FIELD_DESC);
          oprot.writeString(struct.apiName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiVersion != null) {
        if (struct.isSetApiVersion()) {
          oprot.writeFieldBegin(API_VERSION_FIELD_DESC);
          oprot.writeString(struct.apiVersion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.restUri != null) {
        if (struct.isSetRestUri()) {
          oprot.writeFieldBegin(REST_URI_FIELD_DESC);
          oprot.writeString(struct.restUri);
          oprot.writeFieldEnd();
        }
      }
      if (struct.method != null) {
        if (struct.isSetMethod()) {
          oprot.writeFieldBegin(METHOD_FIELD_DESC);
          oprot.writeString(struct.method);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetokApiInfoTupleSchemeFactory implements SchemeFactory {
    public MetokApiInfoTupleScheme getScheme() {
      return new MetokApiInfoTupleScheme();
    }
  }

  private static class MetokApiInfoTupleScheme extends TupleScheme<MetokApiInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MetokApiInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetServerHost()) {
        optionals.set(0);
      }
      if (struct.isSetServerGroup()) {
        optionals.set(1);
      }
      if (struct.isSetServerMode()) {
        optionals.set(2);
      }
      if (struct.isSetApiName()) {
        optionals.set(3);
      }
      if (struct.isSetApiVersion()) {
        optionals.set(4);
      }
      if (struct.isSetRestUri()) {
        optionals.set(5);
      }
      if (struct.isSetMethod()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetServerHost()) {
        oprot.writeString(struct.serverHost);
      }
      if (struct.isSetServerGroup()) {
        oprot.writeString(struct.serverGroup);
      }
      if (struct.isSetServerMode()) {
        oprot.writeString(struct.serverMode);
      }
      if (struct.isSetApiName()) {
        oprot.writeString(struct.apiName);
      }
      if (struct.isSetApiVersion()) {
        oprot.writeString(struct.apiVersion);
      }
      if (struct.isSetRestUri()) {
        oprot.writeString(struct.restUri);
      }
      if (struct.isSetMethod()) {
        oprot.writeString(struct.method);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MetokApiInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.serverHost = iprot.readString();
        struct.setServerHostIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverGroup = iprot.readString();
        struct.setServerGroupIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serverMode = iprot.readString();
        struct.setServerModeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.apiName = iprot.readString();
        struct.setApiNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.apiVersion = iprot.readString();
        struct.setApiVersionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.restUri = iprot.readString();
        struct.setRestUriIsSet(true);
      }
      if (incoming.get(6)) {
        struct.method = iprot.readString();
        struct.setMethodIsSet(true);
      }
    }
  }

}

