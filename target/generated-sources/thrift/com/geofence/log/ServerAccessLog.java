/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.geofence.log;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-10")
public class ServerAccessLog implements org.apache.thrift.TBase<ServerAccessLog, ServerAccessLog._Fields>, java.io.Serializable, Cloneable, Comparable<ServerAccessLog> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServerAccessLog");

  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField API_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("apiInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField REQUEST_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("requestUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("responseTime", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField RESPONSE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("responseLength", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField LOG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("logInfo", org.apache.thrift.protocol.TType.STRUCT, (short)98);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, (short)99);
  private static final org.apache.thrift.protocol.TField TEST_FIELD_DESC = new org.apache.thrift.protocol.TField("test", org.apache.thrift.protocol.TType.BOOL, (short)100);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServerAccessLogStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServerAccessLogTupleSchemeFactory());
  }

  public String time; // optional
  public String uuid; // optional
  public MetokApiInfo apiInfo; // optional
  public ClientInfo clientInfo; // optional
  public String requestUrl; // optional
  public int status; // optional
  public double responseTime; // optional
  public double responseLength; // optional
  public MetokLogInfo logInfo; // optional
  public Map<String,String> extra; // optional
  public boolean test; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME((short)1, "time"),
    UUID((short)2, "uuid"),
    API_INFO((short)3, "apiInfo"),
    CLIENT_INFO((short)4, "clientInfo"),
    REQUEST_URL((short)5, "requestUrl"),
    STATUS((short)6, "status"),
    RESPONSE_TIME((short)7, "responseTime"),
    RESPONSE_LENGTH((short)8, "responseLength"),
    LOG_INFO((short)98, "logInfo"),
    EXTRA((short)99, "extra"),
    TEST((short)100, "test");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME
          return TIME;
        case 2: // UUID
          return UUID;
        case 3: // API_INFO
          return API_INFO;
        case 4: // CLIENT_INFO
          return CLIENT_INFO;
        case 5: // REQUEST_URL
          return REQUEST_URL;
        case 6: // STATUS
          return STATUS;
        case 7: // RESPONSE_TIME
          return RESPONSE_TIME;
        case 8: // RESPONSE_LENGTH
          return RESPONSE_LENGTH;
        case 98: // LOG_INFO
          return LOG_INFO;
        case 99: // EXTRA
          return EXTRA;
        case 100: // TEST
          return TEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __RESPONSETIME_ISSET_ID = 1;
  private static final int __RESPONSELENGTH_ISSET_ID = 2;
  private static final int __TEST_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIME,_Fields.UUID,_Fields.API_INFO,_Fields.CLIENT_INFO,_Fields.REQUEST_URL,_Fields.STATUS,_Fields.RESPONSE_TIME,_Fields.RESPONSE_LENGTH,_Fields.LOG_INFO,_Fields.EXTRA,_Fields.TEST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_INFO, new org.apache.thrift.meta_data.FieldMetaData("apiInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetokApiInfo.class)));
    tmpMap.put(_Fields.CLIENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("clientInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientInfo.class)));
    tmpMap.put(_Fields.REQUEST_URL, new org.apache.thrift.meta_data.FieldMetaData("requestUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESPONSE_TIME, new org.apache.thrift.meta_data.FieldMetaData("responseTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESPONSE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("responseLength", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOG_INFO, new org.apache.thrift.meta_data.FieldMetaData("logInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetokLogInfo.class)));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TEST, new org.apache.thrift.meta_data.FieldMetaData("test", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServerAccessLog.class, metaDataMap);
  }

  public ServerAccessLog() {
    this.extra = new HashMap<String,String>();

    this.test = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServerAccessLog(ServerAccessLog other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTime()) {
      this.time = other.time;
    }
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetApiInfo()) {
      this.apiInfo = new MetokApiInfo(other.apiInfo);
    }
    if (other.isSetClientInfo()) {
      this.clientInfo = new ClientInfo(other.clientInfo);
    }
    if (other.isSetRequestUrl()) {
      this.requestUrl = other.requestUrl;
    }
    this.status = other.status;
    this.responseTime = other.responseTime;
    this.responseLength = other.responseLength;
    if (other.isSetLogInfo()) {
      this.logInfo = new MetokLogInfo(other.logInfo);
    }
    if (other.isSetExtra()) {
      Map<String,String> __this__extra = new HashMap<String,String>(other.extra);
      this.extra = __this__extra;
    }
    this.test = other.test;
  }

  public ServerAccessLog deepCopy() {
    return new ServerAccessLog(this);
  }

  @Override
  public void clear() {
    this.time = null;
    this.uuid = null;
    this.apiInfo = null;
    this.clientInfo = null;
    this.requestUrl = null;
    setStatusIsSet(false);
    this.status = 0;
    setResponseTimeIsSet(false);
    this.responseTime = 0.0;
    setResponseLengthIsSet(false);
    this.responseLength = 0.0;
    this.logInfo = null;
    this.extra = new HashMap<String,String>();

    this.test = false;

  }

  public String getTime() {
    return this.time;
  }

  public ServerAccessLog setTime(String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public String getUuid() {
    return this.uuid;
  }

  public ServerAccessLog setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public MetokApiInfo getApiInfo() {
    return this.apiInfo;
  }

  public ServerAccessLog setApiInfo(MetokApiInfo apiInfo) {
    this.apiInfo = apiInfo;
    return this;
  }

  public void unsetApiInfo() {
    this.apiInfo = null;
  }

  /** Returns true if field apiInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetApiInfo() {
    return this.apiInfo != null;
  }

  public void setApiInfoIsSet(boolean value) {
    if (!value) {
      this.apiInfo = null;
    }
  }

  public ClientInfo getClientInfo() {
    return this.clientInfo;
  }

  public ServerAccessLog setClientInfo(ClientInfo clientInfo) {
    this.clientInfo = clientInfo;
    return this;
  }

  public void unsetClientInfo() {
    this.clientInfo = null;
  }

  /** Returns true if field clientInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetClientInfo() {
    return this.clientInfo != null;
  }

  public void setClientInfoIsSet(boolean value) {
    if (!value) {
      this.clientInfo = null;
    }
  }

  public String getRequestUrl() {
    return this.requestUrl;
  }

  public ServerAccessLog setRequestUrl(String requestUrl) {
    this.requestUrl = requestUrl;
    return this;
  }

  public void unsetRequestUrl() {
    this.requestUrl = null;
  }

  /** Returns true if field requestUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestUrl() {
    return this.requestUrl != null;
  }

  public void setRequestUrlIsSet(boolean value) {
    if (!value) {
      this.requestUrl = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ServerAccessLog setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public double getResponseTime() {
    return this.responseTime;
  }

  public ServerAccessLog setResponseTime(double responseTime) {
    this.responseTime = responseTime;
    setResponseTimeIsSet(true);
    return this;
  }

  public void unsetResponseTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  /** Returns true if field responseTime is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseTime() {
    return EncodingUtils.testBit(__isset_bitfield, __RESPONSETIME_ISSET_ID);
  }

  public void setResponseTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESPONSETIME_ISSET_ID, value);
  }

  public double getResponseLength() {
    return this.responseLength;
  }

  public ServerAccessLog setResponseLength(double responseLength) {
    this.responseLength = responseLength;
    setResponseLengthIsSet(true);
    return this;
  }

  public void unsetResponseLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESPONSELENGTH_ISSET_ID);
  }

  /** Returns true if field responseLength is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseLength() {
    return EncodingUtils.testBit(__isset_bitfield, __RESPONSELENGTH_ISSET_ID);
  }

  public void setResponseLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESPONSELENGTH_ISSET_ID, value);
  }

  public MetokLogInfo getLogInfo() {
    return this.logInfo;
  }

  public ServerAccessLog setLogInfo(MetokLogInfo logInfo) {
    this.logInfo = logInfo;
    return this;
  }

  public void unsetLogInfo() {
    this.logInfo = null;
  }

  /** Returns true if field logInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetLogInfo() {
    return this.logInfo != null;
  }

  public void setLogInfoIsSet(boolean value) {
    if (!value) {
      this.logInfo = null;
    }
  }

  public int getExtraSize() {
    return (this.extra == null) ? 0 : this.extra.size();
  }

  public void putToExtra(String key, String val) {
    if (this.extra == null) {
      this.extra = new HashMap<String,String>();
    }
    this.extra.put(key, val);
  }

  public Map<String,String> getExtra() {
    return this.extra;
  }

  public ServerAccessLog setExtra(Map<String,String> extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  public boolean isTest() {
    return this.test;
  }

  public ServerAccessLog setTest(boolean test) {
    this.test = test;
    setTestIsSet(true);
    return this;
  }

  public void unsetTest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEST_ISSET_ID);
  }

  /** Returns true if field test is set (has been assigned a value) and false otherwise */
  public boolean isSetTest() {
    return EncodingUtils.testBit(__isset_bitfield, __TEST_ISSET_ID);
  }

  public void setTestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case API_INFO:
      if (value == null) {
        unsetApiInfo();
      } else {
        setApiInfo((MetokApiInfo)value);
      }
      break;

    case CLIENT_INFO:
      if (value == null) {
        unsetClientInfo();
      } else {
        setClientInfo((ClientInfo)value);
      }
      break;

    case REQUEST_URL:
      if (value == null) {
        unsetRequestUrl();
      } else {
        setRequestUrl((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case RESPONSE_TIME:
      if (value == null) {
        unsetResponseTime();
      } else {
        setResponseTime((Double)value);
      }
      break;

    case RESPONSE_LENGTH:
      if (value == null) {
        unsetResponseLength();
      } else {
        setResponseLength((Double)value);
      }
      break;

    case LOG_INFO:
      if (value == null) {
        unsetLogInfo();
      } else {
        setLogInfo((MetokLogInfo)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((Map<String,String>)value);
      }
      break;

    case TEST:
      if (value == null) {
        unsetTest();
      } else {
        setTest((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME:
      return getTime();

    case UUID:
      return getUuid();

    case API_INFO:
      return getApiInfo();

    case CLIENT_INFO:
      return getClientInfo();

    case REQUEST_URL:
      return getRequestUrl();

    case STATUS:
      return getStatus();

    case RESPONSE_TIME:
      return getResponseTime();

    case RESPONSE_LENGTH:
      return getResponseLength();

    case LOG_INFO:
      return getLogInfo();

    case EXTRA:
      return getExtra();

    case TEST:
      return isTest();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME:
      return isSetTime();
    case UUID:
      return isSetUuid();
    case API_INFO:
      return isSetApiInfo();
    case CLIENT_INFO:
      return isSetClientInfo();
    case REQUEST_URL:
      return isSetRequestUrl();
    case STATUS:
      return isSetStatus();
    case RESPONSE_TIME:
      return isSetResponseTime();
    case RESPONSE_LENGTH:
      return isSetResponseLength();
    case LOG_INFO:
      return isSetLogInfo();
    case EXTRA:
      return isSetExtra();
    case TEST:
      return isSetTest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServerAccessLog)
      return this.equals((ServerAccessLog)that);
    return false;
  }

  public boolean equals(ServerAccessLog that) {
    if (that == null)
      return false;

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_apiInfo = true && this.isSetApiInfo();
    boolean that_present_apiInfo = true && that.isSetApiInfo();
    if (this_present_apiInfo || that_present_apiInfo) {
      if (!(this_present_apiInfo && that_present_apiInfo))
        return false;
      if (!this.apiInfo.equals(that.apiInfo))
        return false;
    }

    boolean this_present_clientInfo = true && this.isSetClientInfo();
    boolean that_present_clientInfo = true && that.isSetClientInfo();
    if (this_present_clientInfo || that_present_clientInfo) {
      if (!(this_present_clientInfo && that_present_clientInfo))
        return false;
      if (!this.clientInfo.equals(that.clientInfo))
        return false;
    }

    boolean this_present_requestUrl = true && this.isSetRequestUrl();
    boolean that_present_requestUrl = true && that.isSetRequestUrl();
    if (this_present_requestUrl || that_present_requestUrl) {
      if (!(this_present_requestUrl && that_present_requestUrl))
        return false;
      if (!this.requestUrl.equals(that.requestUrl))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_responseTime = true && this.isSetResponseTime();
    boolean that_present_responseTime = true && that.isSetResponseTime();
    if (this_present_responseTime || that_present_responseTime) {
      if (!(this_present_responseTime && that_present_responseTime))
        return false;
      if (this.responseTime != that.responseTime)
        return false;
    }

    boolean this_present_responseLength = true && this.isSetResponseLength();
    boolean that_present_responseLength = true && that.isSetResponseLength();
    if (this_present_responseLength || that_present_responseLength) {
      if (!(this_present_responseLength && that_present_responseLength))
        return false;
      if (this.responseLength != that.responseLength)
        return false;
    }

    boolean this_present_logInfo = true && this.isSetLogInfo();
    boolean that_present_logInfo = true && that.isSetLogInfo();
    if (this_present_logInfo || that_present_logInfo) {
      if (!(this_present_logInfo && that_present_logInfo))
        return false;
      if (!this.logInfo.equals(that.logInfo))
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    boolean this_present_test = true && this.isSetTest();
    boolean that_present_test = true && that.isSetTest();
    if (this_present_test || that_present_test) {
      if (!(this_present_test && that_present_test))
        return false;
      if (this.test != that.test)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_time = true && (isSetTime());
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_apiInfo = true && (isSetApiInfo());
    list.add(present_apiInfo);
    if (present_apiInfo)
      list.add(apiInfo);

    boolean present_clientInfo = true && (isSetClientInfo());
    list.add(present_clientInfo);
    if (present_clientInfo)
      list.add(clientInfo);

    boolean present_requestUrl = true && (isSetRequestUrl());
    list.add(present_requestUrl);
    if (present_requestUrl)
      list.add(requestUrl);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_responseTime = true && (isSetResponseTime());
    list.add(present_responseTime);
    if (present_responseTime)
      list.add(responseTime);

    boolean present_responseLength = true && (isSetResponseLength());
    list.add(present_responseLength);
    if (present_responseLength)
      list.add(responseLength);

    boolean present_logInfo = true && (isSetLogInfo());
    list.add(present_logInfo);
    if (present_logInfo)
      list.add(logInfo);

    boolean present_extra = true && (isSetExtra());
    list.add(present_extra);
    if (present_extra)
      list.add(extra);

    boolean present_test = true && (isSetTest());
    list.add(present_test);
    if (present_test)
      list.add(test);

    return list.hashCode();
  }

  @Override
  public int compareTo(ServerAccessLog other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiInfo()).compareTo(other.isSetApiInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiInfo, other.apiInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientInfo()).compareTo(other.isSetClientInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientInfo, other.clientInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestUrl()).compareTo(other.isSetRequestUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestUrl, other.requestUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseTime()).compareTo(other.isSetResponseTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseTime, other.responseTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseLength()).compareTo(other.isSetResponseLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseLength, other.responseLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogInfo()).compareTo(other.isSetLogInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logInfo, other.logInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTest()).compareTo(other.isSetTest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.test, other.test);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServerAccessLog(");
    boolean first = true;

    if (isSetTime()) {
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
    }
    if (isSetUuid()) {
      if (!first) sb.append(", ");
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
    }
    if (isSetApiInfo()) {
      if (!first) sb.append(", ");
      sb.append("apiInfo:");
      if (this.apiInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.apiInfo);
      }
      first = false;
    }
    if (isSetClientInfo()) {
      if (!first) sb.append(", ");
      sb.append("clientInfo:");
      if (this.clientInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientInfo);
      }
      first = false;
    }
    if (isSetRequestUrl()) {
      if (!first) sb.append(", ");
      sb.append("requestUrl:");
      if (this.requestUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.requestUrl);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetResponseTime()) {
      if (!first) sb.append(", ");
      sb.append("responseTime:");
      sb.append(this.responseTime);
      first = false;
    }
    if (isSetResponseLength()) {
      if (!first) sb.append(", ");
      sb.append("responseLength:");
      sb.append(this.responseLength);
      first = false;
    }
    if (isSetLogInfo()) {
      if (!first) sb.append(", ");
      sb.append("logInfo:");
      if (this.logInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.logInfo);
      }
      first = false;
    }
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
    }
    if (isSetTest()) {
      if (!first) sb.append(", ");
      sb.append("test:");
      sb.append(this.test);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (apiInfo != null) {
      apiInfo.validate();
    }
    if (clientInfo != null) {
      clientInfo.validate();
    }
    if (logInfo != null) {
      logInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServerAccessLogStandardSchemeFactory implements SchemeFactory {
    public ServerAccessLogStandardScheme getScheme() {
      return new ServerAccessLogStandardScheme();
    }
  }

  private static class ServerAccessLogStandardScheme extends StandardScheme<ServerAccessLog> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServerAccessLog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // API_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiInfo = new MetokApiInfo();
              struct.apiInfo.read(iprot);
              struct.setApiInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clientInfo = new ClientInfo();
              struct.clientInfo.read(iprot);
              struct.setClientInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQUEST_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestUrl = iprot.readString();
              struct.setRequestUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESPONSE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.responseTime = iprot.readDouble();
              struct.setResponseTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESPONSE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.responseLength = iprot.readDouble();
              struct.setResponseLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 98: // LOG_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.logInfo = new MetokLogInfo();
              struct.logInfo.read(iprot);
              struct.setLogInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 99: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.extra = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.extra.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // TEST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.test = iprot.readBool();
              struct.setTestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServerAccessLog struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.time != null) {
        if (struct.isSetTime()) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uuid != null) {
        if (struct.isSetUuid()) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiInfo != null) {
        if (struct.isSetApiInfo()) {
          oprot.writeFieldBegin(API_INFO_FIELD_DESC);
          struct.apiInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientInfo != null) {
        if (struct.isSetClientInfo()) {
          oprot.writeFieldBegin(CLIENT_INFO_FIELD_DESC);
          struct.clientInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.requestUrl != null) {
        if (struct.isSetRequestUrl()) {
          oprot.writeFieldBegin(REQUEST_URL_FIELD_DESC);
          oprot.writeString(struct.requestUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResponseTime()) {
        oprot.writeFieldBegin(RESPONSE_TIME_FIELD_DESC);
        oprot.writeDouble(struct.responseTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResponseLength()) {
        oprot.writeFieldBegin(RESPONSE_LENGTH_FIELD_DESC);
        oprot.writeDouble(struct.responseLength);
        oprot.writeFieldEnd();
      }
      if (struct.logInfo != null) {
        if (struct.isSetLogInfo()) {
          oprot.writeFieldBegin(LOG_INFO_FIELD_DESC);
          struct.logInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extra.size()));
            for (Map.Entry<String, String> _iter4 : struct.extra.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTest()) {
        oprot.writeFieldBegin(TEST_FIELD_DESC);
        oprot.writeBool(struct.test);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServerAccessLogTupleSchemeFactory implements SchemeFactory {
    public ServerAccessLogTupleScheme getScheme() {
      return new ServerAccessLogTupleScheme();
    }
  }

  private static class ServerAccessLogTupleScheme extends TupleScheme<ServerAccessLog> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServerAccessLog struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTime()) {
        optionals.set(0);
      }
      if (struct.isSetUuid()) {
        optionals.set(1);
      }
      if (struct.isSetApiInfo()) {
        optionals.set(2);
      }
      if (struct.isSetClientInfo()) {
        optionals.set(3);
      }
      if (struct.isSetRequestUrl()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetResponseTime()) {
        optionals.set(6);
      }
      if (struct.isSetResponseLength()) {
        optionals.set(7);
      }
      if (struct.isSetLogInfo()) {
        optionals.set(8);
      }
      if (struct.isSetExtra()) {
        optionals.set(9);
      }
      if (struct.isSetTest()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetApiInfo()) {
        struct.apiInfo.write(oprot);
      }
      if (struct.isSetClientInfo()) {
        struct.clientInfo.write(oprot);
      }
      if (struct.isSetRequestUrl()) {
        oprot.writeString(struct.requestUrl);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetResponseTime()) {
        oprot.writeDouble(struct.responseTime);
      }
      if (struct.isSetResponseLength()) {
        oprot.writeDouble(struct.responseLength);
      }
      if (struct.isSetLogInfo()) {
        struct.logInfo.write(oprot);
      }
      if (struct.isSetExtra()) {
        {
          oprot.writeI32(struct.extra.size());
          for (Map.Entry<String, String> _iter5 : struct.extra.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetTest()) {
        oprot.writeBool(struct.test);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServerAccessLog struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.apiInfo = new MetokApiInfo();
        struct.apiInfo.read(iprot);
        struct.setApiInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clientInfo = new ClientInfo();
        struct.clientInfo.read(iprot);
        struct.setClientInfoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.requestUrl = iprot.readString();
        struct.setRequestUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.responseTime = iprot.readDouble();
        struct.setResponseTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.responseLength = iprot.readDouble();
        struct.setResponseLengthIsSet(true);
      }
      if (incoming.get(8)) {
        struct.logInfo = new MetokLogInfo();
        struct.logInfo.read(iprot);
        struct.setLogInfoIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extra = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.extra.put(_key7, _val8);
          }
        }
        struct.setExtraIsSet(true);
      }
      if (incoming.get(10)) {
        struct.test = iprot.readBool();
        struct.setTestIsSet(true);
      }
    }
  }

}

