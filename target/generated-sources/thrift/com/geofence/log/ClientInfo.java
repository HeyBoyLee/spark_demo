/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.geofence.log;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-10")
public class ClientInfo implements org.apache.thrift.TBase<ClientInfo, ClientInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ClientInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientInfo");

  private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IMEI_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("imeiMd5", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("userAgent", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientInfoTupleSchemeFactory());
  }

  public String clientIp; // optional
  public String imeiMd5; // optional
  public String userAgent; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_IP((short)1, "clientIp"),
    IMEI_MD5((short)2, "imeiMd5"),
    USER_AGENT((short)3, "userAgent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_IP
          return CLIENT_IP;
        case 2: // IMEI_MD5
          return IMEI_MD5;
        case 3: // USER_AGENT
          return USER_AGENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CLIENT_IP,_Fields.IMEI_MD5,_Fields.USER_AGENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMEI_MD5, new org.apache.thrift.meta_data.FieldMetaData("imeiMd5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_AGENT, new org.apache.thrift.meta_data.FieldMetaData("userAgent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientInfo.class, metaDataMap);
  }

  public ClientInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientInfo(ClientInfo other) {
    if (other.isSetClientIp()) {
      this.clientIp = other.clientIp;
    }
    if (other.isSetImeiMd5()) {
      this.imeiMd5 = other.imeiMd5;
    }
    if (other.isSetUserAgent()) {
      this.userAgent = other.userAgent;
    }
  }

  public ClientInfo deepCopy() {
    return new ClientInfo(this);
  }

  @Override
  public void clear() {
    this.clientIp = null;
    this.imeiMd5 = null;
    this.userAgent = null;
  }

  public String getClientIp() {
    return this.clientIp;
  }

  public ClientInfo setClientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  public void unsetClientIp() {
    this.clientIp = null;
  }

  /** Returns true if field clientIp is set (has been assigned a value) and false otherwise */
  public boolean isSetClientIp() {
    return this.clientIp != null;
  }

  public void setClientIpIsSet(boolean value) {
    if (!value) {
      this.clientIp = null;
    }
  }

  public String getImeiMd5() {
    return this.imeiMd5;
  }

  public ClientInfo setImeiMd5(String imeiMd5) {
    this.imeiMd5 = imeiMd5;
    return this;
  }

  public void unsetImeiMd5() {
    this.imeiMd5 = null;
  }

  /** Returns true if field imeiMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetImeiMd5() {
    return this.imeiMd5 != null;
  }

  public void setImeiMd5IsSet(boolean value) {
    if (!value) {
      this.imeiMd5 = null;
    }
  }

  public String getUserAgent() {
    return this.userAgent;
  }

  public ClientInfo setUserAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  public void unsetUserAgent() {
    this.userAgent = null;
  }

  /** Returns true if field userAgent is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAgent() {
    return this.userAgent != null;
  }

  public void setUserAgentIsSet(boolean value) {
    if (!value) {
      this.userAgent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_IP:
      if (value == null) {
        unsetClientIp();
      } else {
        setClientIp((String)value);
      }
      break;

    case IMEI_MD5:
      if (value == null) {
        unsetImeiMd5();
      } else {
        setImeiMd5((String)value);
      }
      break;

    case USER_AGENT:
      if (value == null) {
        unsetUserAgent();
      } else {
        setUserAgent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_IP:
      return getClientIp();

    case IMEI_MD5:
      return getImeiMd5();

    case USER_AGENT:
      return getUserAgent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_IP:
      return isSetClientIp();
    case IMEI_MD5:
      return isSetImeiMd5();
    case USER_AGENT:
      return isSetUserAgent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientInfo)
      return this.equals((ClientInfo)that);
    return false;
  }

  public boolean equals(ClientInfo that) {
    if (that == null)
      return false;

    boolean this_present_clientIp = true && this.isSetClientIp();
    boolean that_present_clientIp = true && that.isSetClientIp();
    if (this_present_clientIp || that_present_clientIp) {
      if (!(this_present_clientIp && that_present_clientIp))
        return false;
      if (!this.clientIp.equals(that.clientIp))
        return false;
    }

    boolean this_present_imeiMd5 = true && this.isSetImeiMd5();
    boolean that_present_imeiMd5 = true && that.isSetImeiMd5();
    if (this_present_imeiMd5 || that_present_imeiMd5) {
      if (!(this_present_imeiMd5 && that_present_imeiMd5))
        return false;
      if (!this.imeiMd5.equals(that.imeiMd5))
        return false;
    }

    boolean this_present_userAgent = true && this.isSetUserAgent();
    boolean that_present_userAgent = true && that.isSetUserAgent();
    if (this_present_userAgent || that_present_userAgent) {
      if (!(this_present_userAgent && that_present_userAgent))
        return false;
      if (!this.userAgent.equals(that.userAgent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientIp = true && (isSetClientIp());
    list.add(present_clientIp);
    if (present_clientIp)
      list.add(clientIp);

    boolean present_imeiMd5 = true && (isSetImeiMd5());
    list.add(present_imeiMd5);
    if (present_imeiMd5)
      list.add(imeiMd5);

    boolean present_userAgent = true && (isSetUserAgent());
    list.add(present_userAgent);
    if (present_userAgent)
      list.add(userAgent);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClientInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientIp()).compareTo(other.isSetClientIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIp, other.clientIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImeiMd5()).compareTo(other.isSetImeiMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImeiMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imeiMd5, other.imeiMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAgent()).compareTo(other.isSetUserAgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAgent, other.userAgent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientInfo(");
    boolean first = true;

    if (isSetClientIp()) {
      sb.append("clientIp:");
      if (this.clientIp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIp);
      }
      first = false;
    }
    if (isSetImeiMd5()) {
      if (!first) sb.append(", ");
      sb.append("imeiMd5:");
      if (this.imeiMd5 == null) {
        sb.append("null");
      } else {
        sb.append(this.imeiMd5);
      }
      first = false;
    }
    if (isSetUserAgent()) {
      if (!first) sb.append(", ");
      sb.append("userAgent:");
      if (this.userAgent == null) {
        sb.append("null");
      } else {
        sb.append(this.userAgent);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientInfoStandardSchemeFactory implements SchemeFactory {
    public ClientInfoStandardScheme getScheme() {
      return new ClientInfoStandardScheme();
    }
  }

  private static class ClientInfoStandardScheme extends StandardScheme<ClientInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientIp = iprot.readString();
              struct.setClientIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMEI_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imeiMd5 = iprot.readString();
              struct.setImeiMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_AGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userAgent = iprot.readString();
              struct.setUserAgentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientIp != null) {
        if (struct.isSetClientIp()) {
          oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
          oprot.writeString(struct.clientIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imeiMd5 != null) {
        if (struct.isSetImeiMd5()) {
          oprot.writeFieldBegin(IMEI_MD5_FIELD_DESC);
          oprot.writeString(struct.imeiMd5);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userAgent != null) {
        if (struct.isSetUserAgent()) {
          oprot.writeFieldBegin(USER_AGENT_FIELD_DESC);
          oprot.writeString(struct.userAgent);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientInfoTupleSchemeFactory implements SchemeFactory {
    public ClientInfoTupleScheme getScheme() {
      return new ClientInfoTupleScheme();
    }
  }

  private static class ClientInfoTupleScheme extends TupleScheme<ClientInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientIp()) {
        optionals.set(0);
      }
      if (struct.isSetImeiMd5()) {
        optionals.set(1);
      }
      if (struct.isSetUserAgent()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetClientIp()) {
        oprot.writeString(struct.clientIp);
      }
      if (struct.isSetImeiMd5()) {
        oprot.writeString(struct.imeiMd5);
      }
      if (struct.isSetUserAgent()) {
        oprot.writeString(struct.userAgent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.clientIp = iprot.readString();
        struct.setClientIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.imeiMd5 = iprot.readString();
        struct.setImeiMd5IsSet(true);
      }
      if (incoming.get(2)) {
        struct.userAgent = iprot.readString();
        struct.setUserAgentIsSet(true);
      }
    }
  }

}

